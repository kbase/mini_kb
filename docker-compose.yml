version: "3.1"
#
services:
  registry:
    image: registry:2
    ports: ["5000:5000"]
    env_file:
      deployment/conf/registry.ini
  
  rancher:
    image: rancher/server:v1.6.21
    command:
      - "--db-host"
      - "ci-mysql"
      - "--db-port"
      - "3306"
      - "--db-user"
      - "cattle"
      - "--db-pass"
      - "cattle"
      - "--db-name"
      - "cattle"
  nginx:
    image: kbase/nginx:mini
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/openresty.conf.templ:/etc/nginx/nginx.conf"
      - "-template"
      - "/kb/deployment/conf/.templates/minikb-narrative.templ:/etc/nginx/sites-enabled/minikb-narrative"
      - "-template"
      - "/kb/deployment/conf/.templates/lua.templ:/etc/nginx/conf.d/lua"
      - "-stdout"
      - "/var/log/nginx/access.log"
      - "-stdout"
      - "/var/log/nginx/error.log"
      - "-poll"
    #  - "-env"
    #  - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/nginx-minikb.ini"
      - "nginx"
    env_file:
      - deployment/conf/nginx-minikb.ini
    # To bypass the nginx.conf.templ file and use a fully customized nginx.conf file, comment out the 2
    # -template option above that expends the nginx.conf.templ file, and uncomment the following 2 lines
    # and replace /tmp/nginx.conf with the path to the appropriate file.
    # volumes:
    #  - /tmp/nginx.conf:/etc/nginx/nginx,conf
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    ports:
      - "80:80"
      - "443:443"
    depends_on: ["auth", "ws", "shock", "narrative_version", "service_wizard", "narrative_method_store", "user_profile", "catalog" ]
  service_wizard:
    image: kbase/service_wizard:dockerize
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "/kb/deployment/services/service_wizard/start_service"
    env_file:
      - deployment/conf/servicewiz-minikb.ini
    depends_on: ["rancher", "registry" ]

  narrative_method_store:
    image: kbase/narrative_method_store:develop
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/http.ini.templ:/kb/deployment/services/narrative_method_store/start.d/http.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/server.ini.templ:/kb/deployment/services/narrative_method_store/start.d/server.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/start_server.sh.templ:/kb/deployment/bin/start_server.sh"
      - "-stdout"
      - "/kb/deployment/services/narrative_method_store/logs/request.log"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-timeout"
      - "150s"
      - "/kb/deployment/bin/start_server.sh"
    env_file:
      - deployment/conf/nms-minikb.ini
    depends_on: ["auth", "ci-mongo" ]
  catalog:
    image: kbase/catalog:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/deploy.cfg.templ:/kb/deployment/conf/deploy.cfg"
      - "-poll"
      - "-stderr"
      - "/kb/deployment/services/catalog/error.log"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://registry:5000"
      - "-timeout"
      - "150s"
      - "/kb/deployment/services/catalog/start_service"
    depends_on: ["auth", "ci-mongo", "narrative_method_store" ]
    env_file:
      - deployment/conf/catalog-minikb.ini
  user_profile:
    image: kbase/user_profile:latest
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/http.ini.templ:/kb/deployment/jettybase/start.d/http.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/server.ini.templ:/kb/deployment/jettybase/start.d/server.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/start-server.sh.templ:/kb/deployment/bin/start-server.sh"
      - "-stdout"
      - "/kb/deployment/jettybase/logs/request.log"
      - "-poll"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-timeout"
      - "150s"
      - "/bin/bash"
      - "/kb/deployment/bin/start-server.sh"
    env_file:
      - deployment/conf/user_profile.ini
    depends_on: ["auth", "ci-mongo"]
  narrative_version:
    image: kbase/narrative_version:latest
  kbase-ui:
    image: kbase/kbase-ui:latest
    command:
      - "-poll"
      - "-stdout"
      - "/var/log/nginx/access.log"
      - "-stderr"
      - "/var/log/nginx/err.log"
      - "-template"
      - "/kb/deployment/templates/nginx.conf.tmpl:/etc/nginx/nginx.conf"
      - "-template"
      - "/kb/deployment/templates/config.json.tmpl:/kb/deployment/services/kbase-ui/dist/modules/deploy/config.json"
      - "bash"
      - "/kb/deployment/scripts/start-server.bash"
    # Alternatively you can comment out the -env params to the container and use your local
    # environment definitions with something like the following:
    # environment:
    #   - name=value
    #   - name2=value2
    #
    # Or if you want to use a file:
    env_file:
      - deployment/conf/kbase-ui-minikb.ini
    depends_on: ["nginx"]
  
  searchapi:
    image: kbase/kb_search:latest
    command:
    - -template
    - /kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg
    - -template
    - /kb/deployment/conf/.templates/search_tools.cfg.templ:/kb/deployment/conf/search_tools.cfg
    - -template
    - /kb/deployment/conf/.templates/http.ini.templ:/kb/deployment/jettybase/start.d/http.ini
    - -template
    - /kb/deployment/conf/.templates/server.ini.templ:/kb/deployment/jettybase/start.d/server.ini
    - -template
    - /kb/deployment/conf/.templates/start_server.sh.templ:/kb/deployment/bin/start_server.sh
    - "-wait"
    - "tcp://ws:8080"
    - "-wait"
    - "tcp://auth:8080"
    - "-wait"
    - "tcp://elastic:9200"
    - "-timeout"
    - "150s"
    - "-stdout"
    - "/kb/deployment/jettybase/logs/request.log"
    - "/kb/deployment/bin/entrypoint.sh"
    env_file:
      - deployment/conf/search-minikb.ini
    depends_on: ["auth", "handle_service", "ws", "shock", "ujs", "elastic"]


  search:
    image: kbase/kb_search:latest
    command:
      - "-poll"
      - "-stdout"
      - "/kb/deployment/jettybase/logs/request.log"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/search-minikb.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/search_tools.cfg.templ:/kb/deployment/conf/search_tools.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/http.ini.templ:/kb/deployment/jettybase/start.d/http.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/server.ini.templ:/kb/deployment/jettybase/start.d/server.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/start_server.sh.templ:/kb/deployment/bin/start_server.sh"
      - "-timeout"
      - "120s"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://ws:8080"
      - "-wait"
      - "tcp://elastic:9200"
      - "/kb/deployment/bin/entrypoint.sh"
    depends_on: ["auth", "handle_service", "ws", "shock", "ujs", "elastic"]

  coordinator:
    image: kbase/kb_search:latest
    command:
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/search-minikb.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/search_tools.cfg.templ:/kb/deployment/conf/search_tools.cfg"
      - "/kb/deployment/bin/entrypoint.sh"
      - "coordinator"
    depends_on: ["auth", "handle_service", "ws", "shock", "ujs", "nginx", "ci-mongo"]

  worker:
    image: kbase/kb_search:latest
    command:
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/search-minikb.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/search_tools.cfg.templ:/kb/deployment/conf/search_tools.cfg"
      - "-timeout"
      - "120s"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://ws:8080"
      - "/kb/deployment/bin/entrypoint.sh"
      - "worker"
    depends_on: ["auth", "handle_service", "ws", "shock", "ujs", "nginx", "ci-mongo"]

  logstash:
    image: kbase/logstash:latest
    command:
      - "-template"
      - "/usr/share/logstash/.templates/10inputs.templ:/usr/share/logstash/pipeline/10inputs"
      - "-template"
      - "/usr/share/logstash/.templates/99outputs.templ:/usr/share/logstash/pipeline/99outputs"
      - "-timeout"
      - "120s"
      - "-wait"
      - "tcp://elastic:9200"
      - "logstash"
    ports:
      - "9000:9000"
    environment:
      - "debug_output=1"
      - "elastic_server=elastic:9200"
    depends_on: ["elastic"]

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.5
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.ml.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  
  condor:
    image: kbase/condor:latest
    hostname: condor
    environment:
      - POOL_PASSWORD=weakpassword
      - USE_TCP=True
    ports:
      - "9618:9618"
    entrypoint:
      - "/usr/bin/dockerize"
    command:
      - "-poll"
      - "-template"
      - "/etc/condor/.templates/condor_config.local.templ:/etc/condor/condor_config.local"
      - "-stdout"
      - "/var/log/condor/MasterLog"
      - "-stdout"
      - "/var/log/condor/SchedLog"
      - "/usr/sbin/start-condor.sh"
      #- "sleep"
      #- "36000"
      
  
  condor_worker_max:
    image: kbase/kb_njs_wrapper:develop
    hostname: condor_worker_max
    command:
      - "-poll"
      - "-template"
      - "/kb/deployment/conf/.templates/condor_config_worker.templ:/etc/condor/condor_config.local"
      - "-template"
      - "/kb/deployment/conf/.templates/shared_port_config.templ:/etc/condor/config.d/shared_port_config"
      - "-timeout"
      - "120s"
      - "-stdout"
      - "/var/log/condor/ProcLog"
      - "-stdout"
      - "/var/log/condor/StartLog"
      - "/kb/deployment/bin/start-condor.sh"
    depends_on: ["condor"]
    environment:
      - POOL_PASSWORD=weakpassword
      - COLLECTOR_HOST=condor:9618?sock=collector
      - NUM_SLOTS=1
      - CLIENTGROUP="bigmem"
      - USE_TCP=True
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - /mnt/condor:/mnt/condor
      # The line below DOES NOT WORK FOR MacOS, but should uncommented for Unix hosts
      # - /dev/log:/dev/log
  condor_worker_mini:
    image: kbase/kb_njs_wrapper:develop
    hostname: condor_worker_mini
    command:
      - "-poll"
      - "-template"
      - "/kb/deployment/conf/.templates/condor_config_worker.templ:/etc/condor/condor_config.local"
      - "-template"
      - "/kb/deployment/conf/.templates/shared_port_config.templ:/etc/condor/config.d/shared_port_config"
      - "-timeout"
      - "120s"
#     Use the euid and egid flags to set the uid/gid of the final process to be run. Note
#     that the container must start as root for this to work in most situations
#      - "-euid"
#      - "998"
#      - "-egid"
#      - "997"
      - "-stdout"
      - "/var/log/condor/ProcLog"
      - "-stdout"
      - "/var/log/condor/StartLog"
      - "/kb/deployment/bin/start-condor.sh"
#      - "sleep"
#      - "10000"
    depends_on: ["condor"]
    environment:
      - POOL_PASSWORD=weakpassword
      - COLLECTOR_HOST=condor:9618?sock=collector
      - USE_TCP=True
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - /mnt/condor:/mnt/condor
      # The line below DOES NOT WORK FOR MacOS, but should uncommented for Unix hosts
      # - /dev/log:/dev/log

  njs:
    image: kbase/kb_njs_wrapper:develop
    command:
      - "-poll"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/njs-wrapper-minikb.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/http.ini.templ:/kb/deployment/jettybase/start.d/http.ini"
      - "-template"
      - "/kb/deployment/misc/sdklocalmethodrunner_dev.sh:/kb/deployment/misc/sdklocalmethodrunner.sh"
      - "-template"
      - "/kb/deployment/conf/.templates/server.ini.templ:/kb/deployment/jettybase/start.d/server.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/start_server.sh.templ:/kb/deployment/bin/start_server.sh"
      - "-template"
      - "/kb/deployment/conf/.templates/condor_config.templ:/etc/condor/condor_config.local"
      - "-timeout"
      - "120s"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://ws:8080"
      - "-stdout"
      - "/kb/deployment/jettybase/logs/request.log"
      - "/kb/deployment/bin/start_server.sh"
    depends_on: ["auth", "ws", "ci-mongo","ujs","condor"]
    environment:
      - POOL_PASSWORD=weakpassword
    # env_file: deployment/conf/njs-wrapper-minikb.ini
    volumes:
      - /mnt/condor:/mnt/condor
      # Place your jars directory and njs_wrapper code here for local dev
      # - /njs_wrapper:/njs_wrapper

  ujs:
    image: kbase/ujs:develop
    command:
      - "-poll"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/ujs-minikb.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/http.ini.templ:/kb/deployment/jettybase/start.d/http.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/server.ini.templ:/kb/deployment/jettybase/start.d/server.ini"
      - "-template"
      - "/kb/deployment/conf/.templates/start_server.sh.templ:/kb/deployment/bin/start_server.sh"
      - "-timeout"
      - "120s"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://ws:8080"
      - "-stdout"
      - "/kb/deployment/jettybase/logs/request.log"
      - "/kb/deployment/bin/start_server.sh"
      # 
    depends_on: ["auth", "ws", "ci-mongo"]

  ws:
    image: kbase/kb_workspace:develop
    command:
      - "-poll"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-template"
      - "/kb/deployment/conf/.templates/server.xml.templ:/kb/deployment/services/workspace/tomcat/conf/server.xml"
      - "-template"
      - "/kb/deployment/conf/.templates/tomcat-users.xml.templ:/kb/deployment/services/workspace/tomcat/conf/tomcat-users.xml"
      - "-template"
      - "/kb/deployment/conf/.templates/logging.properties.templ:/kb/deployment/services/workspace/tomcat/conf/logging.properties"
      - "-template"
      - "/kb/deployment/conf/.templates/setenv.sh.templ:/kb/deployment/services/workspace/tomcat/bin/setenv.sh"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/workspace-minikb.ini"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://handle_service:8080"
      - "-wait"
      - "tcp://shock:8080"
      - "-timeout"
      - "28800s"
      - "-stdout"
      - "/kb/deployment/services/workspace/tomcat/logs/catalina.out"
      - "-stdout"
      - "/kb/deployment/services/workspace/tomcat/logs/access.log"
      - "/usr/share/tomcat8/bin/catalina.sh"
      - "run"
    #ports:
    #  - "7058:7058"
    depends_on: ["auth", "handle_service", "handle_manager", "ci-mongo", "shock"]
    # Mount this stuff in when running initialize.py is needed to reset workspace config

  shell:
    image: kbase/db_initialize
    entrypoint: [ "/bin/bash"]
    stdin_open: true
    tty: true
    volumes:
      - .:/home/workspace_deluxe
  
  handle_service:
    image: kbase/handle_service:develop
    command:
      - "-poll"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/handle_service-minikb.ini"
      - "-wait"
      - "tcp://auth:8080"
      - "-wait"
      - "tcp://shock:8080"
      - "-wait"
      - "tcp://ci-mysql:3306"
      - "-timeout"
      - "150s"
      - "starman"
      - "--listen"
      - ":8080"
      - "/kb/deployment/lib/Bio/KBase/AbstractHandle/AbstractHandle.psgi"
    environment:
      - KB_SERVICE_NAME=handle_service
    #ports:
    #  - "7109:7109"
    depends_on: ["handle_manager", "ci-mysql", "shock", "auth"]

  shock:
    image: kbase/kb_shock:develop
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/shock-server.cfg.templ:/kb/deployment/conf/shock-server.cfg"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/shock-minikb.ini"
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-wait"
      - "tcp://auth:8080"
      - "-timeout"
      - "150s"
      - "/kb/deployment/bin/shock-server"
      - "--conf"
      - "/kb/deployment/conf/shock-server.cfg"
    #ports:
    #  - "7044:7044"
    depends_on: ["ci-mongo", "auth"]

  handle_manager:
    image: kbase/handle_mngr:develop
    command:
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
      - "-env"
      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/handle_mngr-minikb.ini"
      - "-wait"
      - "tcp://auth:8080"
      - "-timeout"
      - "120s"
      - "starman"
      - "--listen"
      - ":8080"
      - "/kb/deployment/lib/Bio/KBase/HandleMngr/HandleMngr.psgi"
    #ports:
    #  - "9001:9001"
    depends_on: ["auth"]

  auth:
    image: kbase/authtest:latest
    command:
      - "-wait"
      - "tcp://ci-mongo:27017"
      - "-timeout"
      - "120s"
      - "-template"
      - "/kb/deployment/conf/.templates/deployment.cfg.templ:/kb/deployment/conf/deployment.cfg"
#      - "-env"
#      - "https://raw.githubusercontent.com/kbase/mini_kb/master/deployment/conf/auth2-minikb.ini"
      - "/kb/deployment/bin/start_auth2.sh"
    env_file:
      - deployment/conf/auth2-minikb.ini
    #ports:
    #  - "8080:8080"
    depends_on: ["ci-mongo"]

  db-init:
    image: kbase/db_initialize
    volumes:
      - ./mysqldump:/tmp/mysqldump
      - ./ws.mongodump:/tmp/ws.mongodump
      - ./bin:/tmp/bin
    entrypoint:
      - /kb/deployment/bin/dockerize.sh
      - -wait
      - tcp://ci-mysql:3306/
      - -wait
      - tcp://ci-mongo:27017
      - -timeout
      - 120s
      - /tmp/bin/initialize_all.sh
    depends_on: ['ci-mysql','ci-mongo']

  ci-mongo:
    image: mongo:2
    ports:
      - "27017:27017"
    command: --smallfiles

  
  ci-mysql:
    image: mysql:5.5
    command:
      - "mysqld"
      - "--max_allowed_packet=64M"
      - "--wait-timeout=600"
      - "--innodb_log_buffer_size=32M"
      - "--innodb_buffer_pool_size=256M"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    #ports:
    #  - "3306:3306"
